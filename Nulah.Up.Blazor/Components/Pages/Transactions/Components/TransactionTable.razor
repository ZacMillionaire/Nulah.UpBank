@using Nulah.Up.Blazor.Models
@using Marten.Pagination
<MudStack>
    <MudCard Class="pa-3">
        <MudStack>
            <MudDateRangePicker @bind-DateRange="@TransactionDateRange" Margin="Margin.Dense"
                                Editable="false"
                                Clearable="true"
                                AutoClose="false"
                                DateFormat="dddd, dd MMMM, yyyy" TitleDateFormat="MMMM dd"
                                PlaceholderStart="Start Date" PlaceholderEnd="End Date"/>
            <MudSwitch @bind-Value="@ExcludeUncategorisableTransactions" Label="Exclude Uncategorisable Transactions" Color="Color.Info"/>
            <MudSelect T="string" Label="Transaction Types" MultiSelection="true"
                       @bind-SelectedValues="_selectedTransactionTypes">
                @foreach (var state in Enum.GetValues<TransactionType>())
                {
                    <MudSelectItem T="string" Value="@state.ToString()">@state</MudSelectItem>
                }
            </MudSelect>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="FilterTransactions">
                Filter
            </MudButton>
        </MudStack>
    </MudCard>

    <MudGrid Justify="Justify.FlexEnd">
        <MudItem>
            <MudIconButton Icon="@Icons.Material.Filled.HelpOutline" OnClick="@(() => ShowHideHelpDialog(true))"/>
        </MudItem>
    </MudGrid>
    <MudDataGrid @ref="TransactionDataGrid"
                 ServerData="LoadData"
                 T="UpTransaction"
                 Filterable="false"
                 SortMode="@SortMode.None"
                 Dense="true"
                 Groupable="false"
                 FixedHeader="true"
                 RowsPerPage="@(PageSize ?? PageSizeDefault)"
                 CurrentPage="@(Page ?? FirstPageDefault)">
        <ColGroup>
            <col style="min-width: 20px; width: 1%"/>
            <col style="width: 15%"/>
            <col style="width: 70%"/>
            <col style="min-width: 100px; width: 7%"/>
            <col style="min-width: 100px; width: 7%"/>
            <col/>
        </ColGroup>
        <Columns>
            <HierarchyColumn T="UpTransaction"/>
            <PropertyColumn Property="x => x.CreatedAt"/>
            <PropertyColumn Property="x => x.Description" CellStyleFunc="@(transaction => CellStyle(transaction))"/>
            <TemplateColumn Title="In" CellStyle="color: rgb(0,163,68);">
                <CellTemplate>
                    @if (context.Item!.Amount.ValueInBaseUnits >= 0)
                    {
                        @decimal.Parse(context.Item.Amount.Value).ToString("C")
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Out" CellStyle="color: rgb(242,28,13);">
                <CellTemplate>
                    @if (context.Item!.Amount.ValueInBaseUnits < 0)
                    {
                        @decimal.Parse(context.Item.Amount.Value).ToString("C")
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Type">
                <CellTemplate>
                    <MudStack Row="true">
                        @switch (context.Item.InferredType)
                        {
                            case TransactionType.Transaction:
                                <MudIcon Icon="@Icons.Material.Filled.AttachMoney"/>
                                break;
                            case TransactionType.Cover:
                                <MudIcon Icon="@Icons.Material.Filled.SwapHoriz"/>
                                break;
                            case TransactionType.Forward:
                                <MudIcon Icon="@Icons.Material.Filled.ArrowForward"/>
                                break;
                            case TransactionType.Transfer:
                                <MudIcon Icon="@Icons.Material.Filled.ArrowOutward"/>
                                break;
                            case TransactionType.Interest:
                                <MudIcon Icon="@Icons.Material.Filled.TrendingUp"/>
                                break;
                            case TransactionType.Bonus:
                                <MudIcon Icon="@Icons.Material.Filled.AutoAwesome"/>
                                break;
                            case TransactionType.Unknown:
                            default:
                                <MudIcon Icon="@Icons.Material.Filled.QuestionMark"/>
                                break;
                        }
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudCard>
                <MudSimpleTable Bordered="true" Dense="true" Elevation="0" Class="ma-0">
                    <tbody>
                    <tr>
                        <td>Payee</td>
                        <td>@context.Item.Description</td>
                    </tr>
                    <tr>
                        <td>Message</td>
                        <td>@context.Item.Message</td>
                    </tr>
                    <tr>
                        <td>Raw Text</td>
                        <td>@context.Item.RawText</td>
                    </tr>
                    <tr>
                        <td>Created</td>
                        <td>@(context.Item.CreatedAt.ToString("f"))</td>
                    </tr>
                    <tr>
                        <td>Settled</td>
                        <td>@(context.Item.SettledAt?.ToString("f"))</td>
                    </tr>
                    <tr>
                        <td>Parent Category</td>
                        <td>@(context.Item.CategoryParent?.Name)</td>
                    </tr>
                    <tr>
                        <td>Category</td>
                        <td>@(context.Item.Category?.Name)</td>
                    </tr>
                    </tbody>
                </MudSimpleTable>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="UpTransaction" PageSizeOptions="new int[] { 10, 20, 50, 100 }"/>
        </PagerContent>
    </MudDataGrid>
</MudStack>


<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3"/> Edit rating
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudSimpleTable Dense="true">
            <colgroup>
                <col style="width: 10%"/>
                <col/>
            </colgroup>
            <thead>
            <tr>
                <th>Icon</th>
                <th>Description</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>
                    <MudIcon Icon="@Icons.Material.Filled.AttachMoney"/>
                </td>
                <td>Transaction/purchase/payment received from PayID or some other external means.</td>
            </tr>
            <tr>
                <td>
                    <MudIcon Icon="@Icons.Material.Filled.SwapHoriz"/>
                </td>
                <td>Spending account cover. Cover to means a transaction was covered by an account, cover from means that account covered spending.</td>
            </tr>
            <tr>
                <td>
                    <MudIcon Icon="@Icons.Material.Filled.ArrowForward"/>
                </td>
                <td>Forward to/from an account - transactions such as forwarding a payment from someone else to one of your savings accounts will display as this.</td>
            </tr>
            <tr>
                <td>
                    <MudIcon Icon="@Icons.Material.Filled.ArrowOutward"/>
                </td>
                <td>Transfer to/from an account - different from a forward, transfers are moving balance between your accounts and are effectively zero-sum for your total balance.</td>
            </tr>
            <tr>
                <td>
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp"/>
                </td>
                <td>Account interest earned.</td>
            </tr>
            <tr>
                <td>
                    <MudIcon Icon="@Icons.Material.Filled.AutoAwesome"/>
                </td>
                <td>Bonus payment from Up - Upsider bonus or other promotional amount.</td>
            </tr>
            <tr>
                <td>
                    <MudIcon Icon="@Icons.Material.Filled.QuestionMark"/>
                </td>
                <td>Transaction type wasn't able to be inferred, or caching was interrupted.</td>
            </tr>
            </tbody>
        </MudSimpleTable>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ShowHideHelpDialog(false))" Class="px-10">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private const int PageSizeDefault = 50;
    private const int FirstPageDefault = 0;

    [CascadingParameter]
    private IDialogService DialogService { get; set; }

    [Parameter]
    public int? PageSize { get; set; }

    [Parameter]
    public int? Page { get; set; }

    [Parameter]
    public Func<DateTimeOffset?, DateTimeOffset?, bool, IEnumerable<TransactionType>, int, int, Task<IPagedList<UpTransaction>>>? RetrieveTransactions { get; set; }

    public MudDataGrid<UpTransaction>? TransactionDataGrid { get; set; }

    private bool visible;
    private DialogOptions dialogOptions = new() { };
    void ShowHideHelpDialog(bool show) => visible = show;

    [Parameter]
    public DateRange TransactionDateRange { get; set; } = new(
        new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1),
        new DateTime(DateTime.Now.Year, DateTime.Now.Month,
            DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month)
        )
    );

    [Parameter]
    public bool ExcludeUncategorisableTransactions { get; set; }

    private IEnumerable<string> _selectedTransactionTypes { get; set; } = new HashSet<string>() { };

    private async Task<GridData<UpTransaction>> LoadData(GridState<UpTransaction> state)
    {
        // I think this will get called twice on first render due to server side pre-rendering.
        // TODO: investigate that
        if (RetrieveTransactions == null)
        {
            return new GridData<UpTransaction>();
        }

        if (TransactionDateRange is { End: not null })
        {
            TransactionDateRange.End = new DateTime(
                TransactionDateRange.End.Value.Year,
                TransactionDateRange.End.Value.Month,
                TransactionDateRange.End.Value.Day,
                23, 59, 59, DateTimeKind.Local
            );
        }

        var transactions = await RetrieveTransactions(TransactionDateRange?.Start,
            TransactionDateRange?.End,
            ExcludeUncategorisableTransactions,
            _selectedTransactionTypes.Select(Enum.Parse<TransactionType>),
            state.PageSize,
            state.Page + 1);

        return new GridData<UpTransaction>()
        {
            Items = transactions,
            TotalItems = (int)transactions.TotalItemCount
        };
    }

    private string CellStyle(UpTransaction transaction)
    {
        if (transaction.InferredType == TransactionType.Cover)
        {
            return $"background-color: {Colors.Yellow.Lighten5}";
        }

        if (transaction.InferredType == TransactionType.Forward)
        {
            return $"background-color: {Colors.LightBlue.Lighten5}";
        }

        if (transaction.InferredType == TransactionType.Transfer)
        {
            return $"background-color: {Colors.Indigo.Lighten5}";
        }

        return string.Empty;
    }

    private void FilterTransactions(MouseEventArgs obj)
    {
        TransactionDataGrid?.ReloadServerData();
    }

}