@page "/Account/{AccountId}/Transactions"
@using System.Text.Json
@using Marten.Pagination
@using Nulah.Up.Blazor.Components.Pages.Accounts.Dialogs
@using Nulah.Up.Blazor.Components.Pages.Transactions.Components
@using Nulah.Up.Blazor.Models
@using Nulah.UpApi.Lib.ApiModels.Accounts
@using Nulah.UpApi.Lib.Models
@rendermode InteractiveServer
@implements IDisposable

<h3>AccountTransactions</h3>
<MudStack>

    @if (_accountLoading)
    {
        <h1>Loading...</h1>
    }
    else
    {
        <AccountCard Account="LoadedAccount"/>
    }

    @if (_transactionsLoading)
    {
        <h1>Transactions loading</h1>
    }
    else
    {
        <MudExpansionPanels MultiExpansion="true" DisableBorders="true">
            <MudExpansionPanel DisableGutters="true" Dense="true" Style="@($"background-color: {Colors.DeepPurple.Lighten5};")">
                <TitleContent>
                    <MudText>Cache options</MudText>
                </TitleContent>
                <ChildContent>
                    <MudCard Class="pa-3 ma-2" Elevation="0">
                        <MudStack>
                            <MudDateRangePicker Margin="Margin.Dense"
                                                Editable="false"
                                                ReadOnly="true"
                                                DateFormat="dddd, dd MMMM, yyyy" TitleDateFormat="MMMM dd"
                                                @bind-DateRange="CacheDateRange"/>
                            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" OverrideStyles="false">
                                <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="(e) => SetDateRange(e, DateRangeDefaults.ThisMonth)">This month</MudButton>
                                <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="(e) => SetDateRange(e, DateRangeDefaults.Past3Months)">Last 3 months</MudButton>
                                <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="(e) => SetDateRange(e, DateRangeDefaults.LastAustralianFY)">Last Australian financial year</MudButton>
                                <MudButton Color="Color.Warning" Variant="Variant.Outlined" OnClick="(e) => SetDateRange(e, DateRangeDefaults.All)">All transactions for account</MudButton>
                            </MudButtonGroup>
                        </MudStack>
                    </MudCard>
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>

        <TransactionTable @ref="TransactionTableComponent" Page="Page" PageSize="PageSize" RetrieveTransactions="GetTransactions"/>
    }
</MudStack>

@code {

    [Inject]
    private UpApiService _upBankApi { get; set; }

    [Inject]
    private IDialogService DialogService { get; set; }

    [Parameter]
    public string AccountId { get; set; } = null!;

    [SupplyParameterFromQuery]
    public int? PageSize { get; set; }

    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    private bool _accountLoading = true;
    private bool _transactionsLoading = true;
    private UpAccount LoadedAccount { get; set; }

    // Defaults to the start and end of this month
    private DateRange CacheDateRange
    {
        get => _cacheDateRange;
        set { _cacheDateRange = value; }
    }

    private DateRange _cacheDateRange = new DateRange(
        new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1),
        new DateTime(DateTime.Now.Year, DateTime.Now.Month,
            DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month)
        )
    );

    private void DisplayRawData(Account account) => DisplayAccountRaw(account);


    private TransactionTable TransactionTableComponent { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await LoadAccount();
        _transactionsLoading = false;
        StateHasChanged();
        await TransactionTableComponent.TransactionDataGrid.ReloadServerData();
    }

    private async Task LoadAccount()
    {
        _accountLoading = true;
        try
        {
            LoadedAccount = await _upBankApi.Accounts.GetAccount(AccountId);
        }
        catch (Exception ex)
        {
            var options = new DialogOptions { CloseOnEscapeKey = true };

            var parameters = new DialogParameters<ErrorDialog>();
            parameters.Add(x => x.ContentText, ex.Message);

            await DialogService.ShowAsync<ErrorDialog>("Error when loading account", parameters, options);
        }
        finally
        {
            _accountLoading = false;
            StateHasChanged();
        }
    }

    private async Task<IPagedList<UpTransaction>> GetTransactions(DateTimeOffset? since,
        DateTimeOffset? until,
        bool excludeUncategorisableTransactions,
        IEnumerable<TransactionType> transactionTypes,
        int pageSize,
        int page
    )
    {
        return await _upBankApi.GetTransactions(new()
            {
                AccountId = AccountId,
                Since = since,
                Until = until,
                ExcludeUncategorisableTransactions = excludeUncategorisableTransactions,
                TransactionTypes = transactionTypes.ToList()
            },
            pageSize: pageSize, pageNumber: page);
    }

    private void DisplayAccountRaw(Account account)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var parameters = new DialogParameters<ErrorDialog>();
        parameters.Add(x => x.ContentText, JsonSerializer.Serialize(account, new JsonSerializerOptions()
        {
            WriteIndented = true
        }));

        DialogService.Show<DebugDialog>("Account raw data", parameters, options);
    }

    public void Dispose()
    {
    }

    private void SetDateRange(MouseEventArgs obj, DateRangeDefaults dateRangeDefaults)
    {
        switch (dateRangeDefaults)
        {
            case DateRangeDefaults.ThisMonth:
                CacheDateRange = new DateRange(
                    new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1),
                    new DateTime(DateTime.Now.Year, DateTime.Now.Month,
                        DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month)
                    )
                );
                break;
            case DateRangeDefaults.Past3Months:
                CacheDateRange = new DateRange(
                    new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day),
                    new DateTime(DateTime.Now.Year, DateTime.Now.Month - 3,
                        DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month)
                    )
                );
                break;
            case DateRangeDefaults.LastAustralianFY:
                break;
            case DateRangeDefaults.All:
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(dateRangeDefaults), dateRangeDefaults, null);
        }
    }

    private enum DateRangeDefaults
    {
        ThisMonth,
        Past3Months,
        LastAustralianFY,
        All
    }

}