@page "/Cache/Transactions"
@using Nulah.Up.Blazor.Components.Pages.Transactions.Components
@using Marten.Pagination
<h3>TransactionCache</h3>

<MudStack>
    <MudGrid>
        <MudItem xs="12" md="4">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Cached Transactions</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>@CacheStats?.Count</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Most recent cached transaction</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>@(CacheStats?.MostRecentTransactionDate?.LocalDateTime.ToString() ?? "No cache")</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">First cached Transaction Date</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>@(CacheStats?.FirstTransactionDate?.LocalDateTime.ToString() ?? "No cache")</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudButton OnClick="CacheAllTransactions" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary">Cache all transactions</MudButton>

    <TransactionTable TransactionDateRange="@(new DateRange())" @ref="TransactionTableComponent" Page="Page" PageSize="PageSize" RetrieveTransactions="GetTransactions"/>
</MudStack>

@code {

    [Inject]
    private IDialogService DialogService { get; set; }

    [Inject]
    private UpApiService _upBankApi { get; set; }

    [SupplyParameterFromQuery]
    public int? PageSize { get; set; }

    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    private TransactionCacheStats? CacheStats;

    private async void CacheAllTransactions(MouseEventArgs obj)
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = false,
            DisableBackdropClick = true,
            // FullScreen = true
        };

        var parameters = new DialogParameters<CacheDialog>();
        parameters.Add(x => x.Since, CacheStats?.MostRecentTransactionDate?.DateTime);

        await DialogService.ShowAsync<CacheDialog>("Cache transactions", parameters, options);
        // Refresh stats and data table
        CacheStats = await _upBankApi.GetTransactionCacheStats();
        // Assume that by this stage, we have all components available and correctly initialised
        await TransactionTableComponent!.TransactionDataGrid!.ReloadServerData();
        StateHasChanged();
    }

    private TransactionTable? TransactionTableComponent { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        try
        {
            CacheStats = await _upBankApi.GetTransactionCacheStats();
            StateHasChanged();
            if (TransactionTableComponent != null)
            {
                await TransactionTableComponent.TransactionDataGrid.ReloadServerData();
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    private async Task<IPagedList<UpTransaction>> GetTransactions(DateTimeOffset? since, DateTimeOffset? until, int pageSize, int page)
    {
        return await _upBankApi.GetTransactions(null, since, until, pageSize, page);
    }

}