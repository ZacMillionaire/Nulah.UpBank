@using Nulah.Up.Blazor.Services
@using Nulah.UpApi.Lib.Models.Accounts
@using Nulah.Up.Blazor.Components.Dialogs
@using Nulah.Up.Blazor.Models
@implements IDisposable

<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavGroup Title="Accounts" Icon="@Icons.Material.Filled.AccountCircle">
        <MudNavLink Href="accounts" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.ManageAccounts">Management</MudNavLink>
        <MudDivider/>
        <MudNavGroup Title="View All" ExpandedChanged="AccountGroupExpandChange" Icon="@Icons.Material.Filled.AccountTree">
            @if (_isLoading)
            {
                <MudNavLink Disabled="true">Loading...</MudNavLink>
            }
            else
            {
                foreach (var account in LoadedAccounts)
                {
                    <MudNavLink Href="@($"account/{@account.Id}/transactions")" Match="NavLinkMatch.Prefix">@account.DisplayName</MudNavLink>
                }
            }
        </MudNavGroup>
    </MudNavGroup>
</MudNavMenu>

@code{

    [Inject]
    private UpApiService UpBankApi { get; set; } = null!;

    private IReadOnlyList<UpAccount> LoadedAccounts { get; set; } = new List<UpAccount>();
    private bool _isLoading = true;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UpBankApi.AccountsUpdating += UpBankApiOnAccountsUpdating;
            UpBankApi.AccountsUpdated += UpBankApiOnAccountsUpdated;
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private void UpBankApiOnAccountsUpdated(object? sender, IReadOnlyList<UpAccount> e)
    {
        _isLoading = false;
        LoadedAccounts = e;
        StateHasChanged();
    }

    private void UpBankApiOnAccountsUpdating(object? sender, EventArgs e)
    {
        _isLoading = true;
        StateHasChanged();
    }

    private async void AccountGroupExpandChange(bool expandedState)
    {
        if (expandedState && LoadedAccounts.Count == 0)
        {
            // trigger a load that wil then fire off any events that will then update the list
            await UpBankApi.GetAccounts();
        }
    }

    public void Dispose()
    {
        UpBankApi.AccountsUpdating -= UpBankApiOnAccountsUpdating;
        UpBankApi.AccountsUpdated -= UpBankApiOnAccountsUpdated;
    }

}