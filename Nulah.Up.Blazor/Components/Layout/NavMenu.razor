@using Nulah.Up.Blazor.Services
@using Nulah.UpApi.Lib.Models.Accounts
@using Nulah.Up.Blazor.Components.Dialogs
<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavGroup Title="Accounts" Expanded="false" Icon="@Icons.Material.Filled.ManageAccounts">
        <MudNavLink Href="accounts" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.AccountTree">View all</MudNavLink>
        @if (IsLoading)
        {
            <MudNavLink Disabled="true">Loading...</MudNavLink>
        }
        else
        {
            foreach (var account in LoadedAccounts)
            {
                <MudNavLink Href="@($"account/{@account.Id}/transactions")" Match="NavLinkMatch.Prefix">@account.Attributes.DisplayName</MudNavLink>
            }
        }
    </MudNavGroup>
</MudNavMenu>

@code{

    [Inject]
    private UpApiService _upBankApi { get; set; }

    [Inject]
    private IDialogService DialogService { get; set; }

    private IReadOnlyList<Account> LoadedAccounts { get; set; } = new List<Account>();
    private bool IsLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadAccounts();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadAccounts()
    {
        // TODO: I should move accounts to an inmemory cache situation as it's likely the UpApiService will be shared across all pages
        IsLoading = true;
        try
        {
            LoadedAccounts = await _upBankApi.GetAccounts();
        }
        catch (Exception ex)
        {
            var options = new DialogOptions { CloseOnEscapeKey = true };

            var parameters = new DialogParameters<ErrorDialog>();
            parameters.Add(x => x.ContentText, ex.Message);

            await DialogService.ShowAsync<ErrorDialog>("Error when loading accounts", parameters, options);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

}