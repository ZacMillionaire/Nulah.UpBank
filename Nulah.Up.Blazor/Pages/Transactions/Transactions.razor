@* @page "/Transactions" *@
@* *@
@* @if (IsLoading) *@
@* { *@
@*     <h1>Loading...</h1> *@
@* } *@
@* else *@
@* { *@
@*     <h3>Account</h3> *@
@*     <MudButton Color="Color.Primary" OnClick="RefreshAccounts">Refresh</MudButton> *@
@*     <MudGrid> *@
@*             <MudItem xs="12" md="3"> *@
@*                 <MudCard> *@
@*                     <MudCardHeader> *@
@*                         <CardHeaderContent> *@
@*                             <MudText Typo="Typo.h6">@LoadedAccount.Attributes.DisplayName</MudText> *@
@*                         </CardHeaderContent> *@
@*                         <CardHeaderActions> *@
@*                             <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" Color="Color.Default" OnClick="@(_ => DisplayRawData(account))"/> *@
@*                         </CardHeaderActions> *@
@*                     </MudCardHeader> *@
@*                     <MudCardContent> *@
@*                         <MudText>@LoadedAccount.Attributes.Balance.Value</MudText> *@
@*                         <MudText Typo="Typo.body2">@LoadedAccount.Attributes.Balance.CurrencyCode</MudText> *@
@*                         <MudText Typo="Typo.body2">@LoadedAccount.Attributes.AccountType</MudText> *@
@*                     </MudCardContent> *@
@*                     <MudCardActions> *@
@*                         <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton> *@
@*                     </MudCardActions> *@
@*                 </MudCard> *@
@*             </MudItem> *@
@*     </MudGrid> *@
@* } *@
@* <h3>Transactions</h3> *@
@* *@
@* @code { *@
@* *@
@*     [Inject] *@
@*     private UpApiService _upBankApi { get; set; } *@
@* *@
@*     private Account LoadedAccount { get; set; } *@
@*      *@
@*     private bool IsLoading = true; *@
@* *@
@*      *@
@*     protected override async Task OnAfterRenderAsync(bool firstRender) *@
@*     { *@
@*         if (firstRender) *@
@*         { *@
@*             await LoadAccount(); *@
@*         } *@
@* *@
@*         await base.OnAfterRenderAsync(firstRender); *@
@*     } *@
@*      *@
@*     private async Task LoadAccount() *@
@*     { *@
@*         IsLoading = true; *@
@*         try *@
@*         { *@
@*             LoadedAccounts = await _upBankApi.GetAccounts(); *@
@*         } *@
@*         catch (Exception ex) *@
@*         { *@
@*             var options = new DialogOptions { CloseOnEscapeKey = true }; *@
@* *@
@*             var parameters = new DialogParameters<ErrorDialog>(); *@
@*             parameters.Add(x => x.ContentText, ex.Message); *@
@* *@
@*             await DialogService.ShowAsync<ErrorDialog>("Error when loading accounts", parameters, options); *@
@*         } *@
@*         finally *@
@*         { *@
@*             IsLoading = false; *@
@*             StateHasChanged(); *@
@*         } *@
@*     } *@
@* } *@