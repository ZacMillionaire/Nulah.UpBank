@implements IDisposable
<MudDialog Style="min-width: 1020px">
    <DialogContent>
        <MudStack>
            <MudCard Class="pa-3">
                <MudTimeline>
                    <MudTimelineItem>
                        <MudStack>
                            <MudDatePicker Label="Until" @bind-Date="@Until" Margin="Margin.Dense" Clearable="true"
                                           DateFormat="dddd, dd MMMM, yyyy" TitleDateFormat="MMMM dd"/>
                            <MudText Typo="Typo.caption">
                                Most recent transaction date. If empty, all transactions until <strong>today</strong> will be cached.
                            </MudText>
                        </MudStack>
                    </MudTimelineItem>
                    <MudTimelineItem>
                        <MudStack>
                            <MudDatePicker Label="Since" @bind-Date="@Since" Margin="Margin.Dense" Clearable="true"
                                           DateFormat="dddd, dd MMMM, yyyy" TitleDateFormat="MMMM dd" MaxDate="@DateTime.Now"/>
                            <MudText Typo="Typo.caption">Oldest transaction to cache from.</MudText>
                        </MudStack>
                    </MudTimelineItem>
                </MudTimeline>
            </MudCard>
            @if (CacheInProgress)
            {
                <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7"/>
            }
            @if (CacheInProgress || CacheComplete)
            {
                <MudContainer Style="max-height: 300px; overflow-y: scroll">
                    @foreach (var cacheEventMessage in CacheMessages)
                    {
                        <MudText>@cacheEventMessage</MudText>
                    }
                </MudContainer>
            }
            <MudText>@((MarkupString)PreCacheExplaination)</MudText>
            <MudText>Additionally caching transactions will also cache categories, so this will also ensure categories are kept up to date.</MudText>
            <MudText>If you've changed categories for a transaction, caching again will update all relevant details. Changing transactions within this app will always ensure the transaction reflects the api at the time of update.</MudText>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="StartCache" Disabled="CacheInProgress">Start Cache</MudButton>
            <MudButton Color="Color.Success" OnClick="CloseDialog" Disabled="CacheInProgress">Close</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {

    [Inject]
    private UpApiService _upBankApi { get; set; }

    [Parameter]
    public DateTime? Since { get; set; }

    [Parameter]
    public DateTime? Until { get; set; }

    // lol, this is here because the Api can be a bit confusing with since/until and what it does, so this is more for 
    // my benefit than actually making sense
    public string PreCacheExplaination
    {
        get
        {
            if (Since == null && Until == null)
            {
                return "Will cache <strong>all transactions</strong> available until the first transaction ever made across all accounts.";
            }

            if (Since == null && Until != null)
            {
                return $"Will cache all transactions from before <strong>{Until:dddd, dd MMMM, yyyy}</strong> until the first transaction ever made across all accounts.";
            }

            if (Since != null && Until == null)
            {
                return $"Will cache all transactions from <strong>{Since:dddd, dd MMMM, yyyy}</strong> until midnight, <strong>{DateTime.Now:dddd, dd MMMM, yyyy}</strong>.";
            }

            return $"Will cache all transactions from <strong>{Since:dddd, dd MMMM, yyyy}</strong> until midnight, <strong>{Until:dddd, dd MMMM, yyyy}</strong>.";
        }
    }


    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    //TODO: add parameters for other filters such as since/until
    private List<string> CacheMessages = new();
    private bool CacheInProgress;
    private bool CacheComplete;

    protected override void OnInitialized()
    {
        _upBankApi.TransactionCacheStarted += UpBankApiOnTransactionCacheStarted;
        _upBankApi.TransactionCacheFinished += UpBankApiOnTransactionCacheFinished;
        _upBankApi.TransactionCacheMessage += UpBankApiOnTransactionCacheMessage;

        base.OnInitialized();
    }

    private void UpBankApiOnTransactionCacheStarted(object? sender, EventArgs e)
    {
        CacheInProgress = true;
        StateHasChanged();
    }

    private void UpBankApiOnTransactionCacheFinished(object? sender, EventArgs e)
    {
        CacheInProgress = false;
        CacheComplete = true;
        StateHasChanged();
    }

    private void UpBankApiOnTransactionCacheMessage(object? sender, string e)
    {
        CacheMessages.Add(e);
        StateHasChanged();
    }

    private async void StartCache()
    {
        CacheMessages.Clear();
        var transactions = await _upBankApi.Transactions.CacheTransactions(pageSize: 100,
            since: Since,
            until: Until ?? new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 23, 49, 59, DateTimeKind.Local)
        );
    }

    public void Dispose()
    {
        _upBankApi.TransactionCacheStarted -= UpBankApiOnTransactionCacheStarted;
        _upBankApi.TransactionCacheFinished -= UpBankApiOnTransactionCacheFinished;
        _upBankApi.TransactionCacheMessage -= UpBankApiOnTransactionCacheMessage;
    }

    private void CloseDialog(MouseEventArgs obj)
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    private DateRange TransactionDateRange { get; set; }

}